#include <iostream>

int dp[21][21][21] = { 0, };

int w(int A, int B, int C)
{
    if (A <= 0 || B <= 0 || C <= 0)
        return 1;

    if (A > 20 || B > 20 || C > 20)
        return w(20, 20, 20);

    if (dp[A][B][C] != 0)
        return dp[A][B][C];

    if (A < B && B < C)
        dp[A][B][C] = w(A, B, C - 1) + w(A, B - 1, C - 1) - w(A, B - 1, C);
    else
        dp[A][B][C] = w(A - 1, B, C) + w(A - 1, B - 1, C) + w(A - 1, B, C - 1) - w(A - 1, B - 1, C - 1);

    return dp[A][B][C];
}

int main()
{
    std::ios::sync_with_stdio(0);
    std::cin.tie(0);

    while (1)
    {
        int a, b, c;
        std::cin >> a >> b >> c;
        if (a == -1 && b == -1 && c == -1)
            break;

        std::cout << "w(" << a << ", "<< b << ", "<< c << ")" << " = " 
            << w(a,b,c) <<'\n';
    }
    return 0;
};
